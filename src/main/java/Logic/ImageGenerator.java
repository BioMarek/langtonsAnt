package Logic;

import Utils.ColorsPicker;
import Utils.Settings;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

public class ImageGenerator {
    private final int squares = Settings.I_SIZE_IN_PIXELS / Settings.I_SIZE_OF_SQUARE;
    private static Graphics2D graphics;
    private Ant ant;

    public void drawAllRules() {
        java.util.List<String> rules = RulesGenerator.generateRules(Settings.I_RULES_MAX_LENGTH);
        for (String rule : rules) {
            ant = new Ant(squares, rule);
            saveImageWithoutPanel(rule);
        }
    }

    /**
     * Saves image generated by ant running given rule. Creates image from grid and saves it directly into file.
     *
     * @param rule that ant is running
     */
    private void saveImageWithoutPanel(String rule) {
        BufferedImage bImg = new BufferedImage(Settings.I_SIZE_IN_PIXELS, Settings.I_SIZE_IN_PIXELS, BufferedImage.TYPE_INT_RGB);
        graphics = bImg.createGraphics();
        ant.allMoves();
        draw();

        try {
            ImageIO.write(bImg, "png", new File("./" + rule + ".png"));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Converts grid numbers to {@link Graphics2D}.
     */
    private void draw() {
        for (int row = 0; row < squares; row++) {
            for (int column = 0; column < squares; column++) {
                ColorsPicker.setColor(graphics, ant.grid[row][column]);
                graphics.fillRect(row * Settings.SIZE_OF_SQUARE,
                        column * Settings.SIZE_OF_SQUARE,
                        Settings.SIZE_OF_SQUARE,
                        Settings.SIZE_OF_SQUARE);
            }
        }
    }
}
